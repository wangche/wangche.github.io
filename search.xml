<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[hexo出现Template render error]]></title>
      <url>%2F%2Fblog%2F2017%2F03%2Fhexo-template.html</url>
      <content type="text"><![CDATA[今天写博客时候发现hexo老是报错，后来发现是md文件写的有问题导致的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) SyntaxError: Invalid or unexpected token at Object.exports.prettifyError (D:\Blog\wangche.github.io\node_modules\nunjucks\src\lib.js:34:15) at new_cls.render (D:\Blog\wangche.github.io\node_modules\nunjucks\src\environment.js:469:27) at new_cls.renderString (D:\Blog\wangche.github.io\node_modules\nunjucks\src\environment.js:327:21) at D:\Blog\wangche.github.io\node_modules\hexo\lib\extend\tag.js:66:9 at Promise._execute (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\debuggability.js:300:9) at Promise._resolveFromExecutor (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:481:18) at new Promise (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:77:14) at Tag.render (D:\Blog\wangche.github.io\node_modules\hexo\lib\extend\tag.js:64:10) at Object.tagFilter [as onRenderEnd] (D:\Blog\wangche.github.io\node_modules\hexo\lib\hexo\post.js:253:16) at D:\Blog\wangche.github.io\node_modules\hexo\lib\hexo\render.js:65:19 at tryCatcher (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\util.js:16:23) at Promise._settlePromiseFromHandler (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:510:31) at Promise._settlePromise (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:567:18) at Promise._settlePromise0 (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:612:10) at Promise._settlePromises (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:691:18) at Async._drainQueue (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\async.js:133:16) at Async._drainQueues (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\async.js:143:10) at Immediate.Async.drainQueues (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\async.js:17:14) at runCallback (timers.js:649:20) at tryOnImmediate (timers.js:622:5) at processImmediate [as _immediateCallback] (timers.js:594:5)FATAL (unknown path) SyntaxError: Invalid or unexpected tokenTemplate render error: (unknown path) SyntaxError: Invalid or unexpected token at Object.exports.prettifyError (D:\Blog\wangche.github.io\node_modules\nunjucks\src\lib.js:34:15) at new_cls.render (D:\Blog\wangche.github.io\node_modules\nunjucks\src\environment.js:469:27) at new_cls.renderString (D:\Blog\wangche.github.io\node_modules\nunjucks\src\environment.js:327:21) at D:\Blog\wangche.github.io\node_modules\hexo\lib\extend\tag.js:66:9 at Promise._execute (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\debuggability.js:300:9) at Promise._resolveFromExecutor (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:481:18) at new Promise (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:77:14) at Tag.render (D:\Blog\wangche.github.io\node_modules\hexo\lib\extend\tag.js:64:10) at Object.tagFilter [as onRenderEnd] (D:\Blog\wangche.github.io\node_modules\hexo\lib\hexo\post.js:253:16) at D:\Blog\wangche.github.io\node_modules\hexo\lib\hexo\render.js:65:19 at tryCatcher (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\util.js:16:23) at Promise._settlePromiseFromHandler (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:510:31) at Promise._settlePromise (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:567:18) at Promise._settlePromise0 (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:612:10) at Promise._settlePromises (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\promise.js:691:18) at Async._drainQueue (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\async.js:133:16) at Async._drainQueues (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\async.js:143:10) at Immediate.Async.drainQueues (D:\Blog\wangche.github.io\node_modules\bluebird\js\release\async.js:17:14) at runCallback (timers.js:649:20) at tryOnImmediate (timers.js:622:5) at processImmediate [as _immediateCallback] (timers.js:594:5) 在网上看我一段时间之后发现并没有什么解决方案，后来查看新添加的md文档发现多出来一些奇怪的东西。 只需要将标红部分删除即可，markdown编辑器是typora，非常好用，推荐一波。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[redis中bitmap的应用]]></title>
      <url>%2F%2Fblog%2F2017%2F03%2Fredis-bitmap.html</url>
      <content type="text"><![CDATA[在Redis中我们经常用到set,get等命令，细心的你有没有发现，还有几个相似的命令叫setbit,getbit，它们是用来干嘛的？ BitMap是什么就是通过一个bit位来表示某个元素对应的值或者状态,其中的key就是对应元素本身。我们知道8个bit可以组成一个Byte，所以bitmap本身会极大的节省储存空间。 Redis中的BitMapRedis从2.2.0版本开始新增了setbit,getbit,bitcount等几个bitmap相关命令。虽然是新命令，但是并没有新增新的数据类型，因为setbit等命令只不过是在set上的扩展。 setbit命令介绍指令 SETBIT key offset value复杂度 O(1)设置或者清空key的value(字符串)在offset处的bit值(只能只0或者1)。 空间占用、以及第一次分配空间需要的时间在一台2010MacBook Pro上，offset为2^32-1（分配512MB）需要～300ms，offset为2^30-1(分配128MB)需要～80ms，offset为2^28-1（分配32MB）需要～30ms，offset为2^26-1（分配8MB）需要8ms。&lt;来自官方文档&gt;大概的空间占用计算公式是：($offset/8/1024/1024)MB 使用场景一：用户签到很多网站都提供了签到功能(这里不考虑数据落地事宜)，并且需要展示最近一个月的签到情况，如果使用bitmap我们怎么做？一言不合亮代码！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?php$redis = new Redis();$redis-&gt;connect('127.0.0.1');//用户uid$uid = 1;//记录有uid的key$cacheKey = sprintf("sign_%d", $uid);//开始有签到功能的日期$startDate = '2017-01-01';//今天的日期$todayDate = '2017-01-21';//计算offset$startTime = strtotime($startDate);$todayTime = strtotime($todayDate);$offset = floor(($todayTime - $startTime) / 86400);echo "今天是第&#123;$offset&#125;天" . PHP_EOL;//签到//一年一个用户会占用多少空间呢？大约365/8=45.625个字节，好小，有木有被惊呆？$redis-&gt;setBit($cacheKey, $offset, 1);//查询签到情况$bitStatus = $redis-&gt;getBit($cacheKey, $offset);echo 1 == $bitStatus ? '今天已经签到啦' : '还没有签到呢';echo PHP_EOL;//计算总签到次数echo $redis-&gt;bitCount($cacheKey) . PHP_EOL;/*** 计算某段时间内的签到次数* 很不幸啊,bitCount虽然提供了start和end参数，但是这个说的是字符串的位置，而不是对应"位"的位置* 幸运的是我们可以通过get命令将value取出来，自己解析。并且这个value不会太大，上面计算过一年一个用户只需要45个字节* 给我们的网站定一个小目标，运行30年，那么一共需要1.31KB(就问你屌不屌？)*///这是个错误的计算方式echo $redis-&gt;bitCount($cacheKey, 0, 20) . PHP_EOL; 使用场景二：统计活跃用户使用时间作为cacheKey，然后用户ID为offset，如果当日活跃过就设置为1那么我该如果计算某几天/月/年的活跃用户呢(暂且约定，统计时间内只有有一天在线就称为活跃)，有请下一个redis的命令命令 BITOP operation destkey key [key ...]说明：对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。说明：BITOP 命令支持 AND 、 OR 、 NOT 、 XOR 这四种操作中的任意一种参数 12345678910111213141516171819202122232425262728//日期对应的活跃用户$data = array('2017-01-10' =&gt; array(1,2,3,4,5,6,7,8,9,10),'2017-01-11' =&gt; array(1,2,3,4,5,6,7,8),'2017-01-12' =&gt; array(1,2,3,4,5,6),'2017-01-13' =&gt; array(1,2,3,4),'2017-01-14' =&gt; array(1,2));//批量设置活跃状态foreach($data as $date=&gt;$uids) &#123;$cacheKey = sprintf("stat_%s", $date);foreach($uids as $uid) &#123;$redis-&gt;setBit($cacheKey, $uid, 1);&#125;&#125;$redis-&gt;bitOp('AND', 'stat', 'stat_2017-01-10', 'stat_2017-01-11', 'stat_2017-01-12') . PHP_EOL;//总活跃用户：6echo "总活跃用户：" . $redis-&gt;bitCount('stat') . PHP_EOL;$redis-&gt;bitOp('AND', 'stat1', 'stat_2017-01-10', 'stat_2017-01-11', 'stat_2017-01-14') . PHP_EOL;//总活跃用户：2echo "总活跃用户：" . $redis-&gt;bitCount('stat1') . PHP_EOL;$redis-&gt;bitOp('AND', 'stat2', 'stat_2017-01-10', 'stat_2017-01-11') . PHP_EOL;//总活跃用户：8echo "总活跃用户：" . $redis-&gt;bitCount('stat2') . PHP_EOL; 假设当前站点有5000W用户，那么一天的数据大约为50000000/8/1024/1024=6MB 使用场景三：用户在线状态前段时间开发一个项目，对方给我提供了一个查询当前用户是否在线的接口。不了解对方是怎么做的，自己考虑了一下，使用bitmap是一个节约空间效率又高的一种方法，只需要一个key，然后用户ID为offset，如果在线就设置为1，不在线就设置为0，和上面的场景一样，5000W用户只需要6MB的空间。 12345678910111213141516171819//批量设置在线状态$uids = range(1, 500000);foreach($uids as $uid) &#123;$redis-&gt;setBit('online', $uid, $uid % 2);&#125;//一个一个获取状态$uids = range(1, 500000);$startTime = microtime(true);foreach($uids as $uid) &#123;echo $redis-&gt;getBit('online', $uid) . PHP_EOL;&#125;$endTime = microtime(true);//在我的电脑上，获取50W个用户的状态需要25秒echo "total:" . ($endTime - $startTime) . "s";/*** 对于批量的获取，上面是一种效率低的办法，实际可以通过get获取到value，然后自己计算* 具体计算方法改天再写吧，之前写的代码找不见了。。。*/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《潜伏之赤途》后感]]></title>
      <url>%2F%2Fblog%2F2017%2F01%2Fchitu.html</url>
      <content type="text"><![CDATA[上一款让我如此震撼的游戏是Playdead的《inside》 刚刚一周目完了《潜伏之赤途》这款被称为国产神作的AVG游戏，游戏如同一曲悲歌，让人震撼又沉思。 这款游戏与去年的热播剧伪装者颇有相似，主角的人物背景也都是五面间谍“袁殊”，电视剧因为和谐社会的需要进行了修饰，而这款游戏从发行到被封杀竟然存活了一年多简直是奇迹。 第一人称的你是叫方别，是一名中共地下党，为了潜伏下去，在游戏中你要面临大量沉重的，非生即死的选择，各种纠葛冲突编织成一个巨大的网络，而你需要戴着面具，尔虞我诈，在这险象环生的局面下活下去，为了活下去你可能要杀掉自己的恩师，杀掉爱慕你的学妹，逼疯青梅竹马的姑娘，以及一些善良的人。当然，你也会收获一些意外的爱情，游戏中的张晓梦敢爱敢恨，是我最喜欢的角色。 他因谎言实现人生价值，亦因谎言落入深渊；前半生靠自己的谎言救回了别人，后半生靠别人的谎言救回了自己。所有理想主义者和功利主义者都应该试一下这个游戏，以第一人称体验一下个体在滚滚历史洪流中如同浮萍般的命运。这个游戏应当在国产AVG游戏史上留下浓墨重彩的一笔。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[tp5中使用redis的一些问题]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2Fredis-tp5.html</url>
      <content type="text"><![CDATA[个人一直在使用tp3.2，并没有用过tp5，这个问题也是朋友碰到的一个问题。 tp5框架内的redis缓存驱动包含的redis驱动特性比较少，比如说就不能使用lpush来做队列，当然这个问题可以通过在redis驱动里扩展方法来解决。不过，还是mark一下，如果以后用tp5注意这一点。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用redis来实现身份验证]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2Fredis-auth.html</url>
      <content type="text"><![CDATA[session 经常出现丢失的情况，所以目前用redis来实现身份的验证是非常流行的一种做法。 具体方法如下：前端把account和password，提交到服务端的登录api，服务端验证正确后，生成一个token，并把token和userId，存在redis缓存里，然后把token返回给前端。前端每次的请求头中带token，这样就是简单的token 机制实现身份验证。 不过这样还有一个问题，就是token的有效期问题，在这里可以使用这样一个做法，只要用户使用了任何一个接口，token的有效期顺延一天，这样就不会出现token有效期到了，跳转到登陆界面重新获取token，如果用户超过token有效期的话，就需要重新登录获取新的token。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[跨域的一些问题总结]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2Fajax-kuayu.html</url>
      <content type="text"><![CDATA[以下总结是在后台前后端分离遇到的。 蓝景商城接口同时支持可以用JSONP 和 JSON 的形式调用。 AJAX调用接口的时候，如果当前页面的url和接口不在一个同一个主域下，或者不在同一个端口下，就会出现跨域请求的问题。 不在同域下，常用的一种做法是，用AJAX的 JSONP 形式来请求接口，如果对于纯数据的JSON交换，是不会产生问题的。 但是，如果是文件上传，那么，就会有些不一样了，因为 JSONP 不支持文件上传。这时候，只能调用JSON接口，所以，一种有效的做法是设置 access-control-allow-origin = “*”。 正常情况下，如果设置access-control-allow-origin＝”*” 之后，应该就什么跨域问题都不存在了。 确实，在其他组的项目中，设置上面的那个选项后，就没必要关心跨域造成的问题了。其实，造成问题的原因是，后端的框架在所有请求成功到后端的逻辑代码之前，会先进行拦截器这一层。 简要说下拦截器，主要就是判断用户是否登陆的，需要用到一个在浏览器设置过的cookie值来比对。 那么，问题的产生就是，正常的AJAX文件上传的请求时不会带上cookie的，如果一定要带上cookie，可以设置 1234567$.ajax(&#123; xhrFields: &#123; withCredentials: true &#125; //, //...&#125;); 这样设置之后，是会带上cookie的，这时，服务端的access-control-allow-origin 就不能设置*了，范围太大了，浏览器不允许，这时候，设置对应的入口文件所在的域就行了,这样就只允许那个域来访问了。 －－－－－分隔符 后来，考虑到将入口文件放在前端资源服务器上的url给用户用，会感到很奇怪，于是，就将Angular写的项目的入口文件放在后端，成了.vm 文件。 一般这个文件改动几乎不大，因为Angular是加载模版的，模板文件依旧在前端资源服务器上，这里注意，所以的资源路径都要写成绝对路径。这时，后端访问前端也造成来跨域问题，但是这里只要在前端的ads或bds 设置access-control-allow-origin ＝ “*” 就可以了。 经过cdn的 assets.souche.com 依旧不行，于是，模板文件的域写成f2e-assets.souche.com，其他js、css可以用asset.souche.com. 资源的服务器地址可以写在入口文件中的全局js变量里，用大写。 12345&lt;script&gt; var TEMPLATE_URI = 'http://$&#123;templateServer&#125;/dafengche/order';&lt;/script&gt; 之后的项目，应该都是采用这样的方式，入口放后端，其他的资源在前端。之前还存在的一个问题是，后端拦截器对未登录的请求直接重定向到了单点登录页面，其实对于JSON请求，应该返回一个JSON数据，里面的success=false, msg=”未登录，请刷新” 这样才比较合理，当然，对正常对浏览器http请求，则可以用重定向(这个忘了后端有没有写了，这样的话，一旦用户刷新了，因为入口文件在后端，会先被拦截器拦截，跳到了登录页，不会有什么问题。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[thinkphp之支付宝]]></title>
      <url>%2F%2Fblog%2F2016%2F09%2Falipay.html</url>
      <content type="text"><![CDATA[最近一直在做支付模块，简直是支付小王子，必须记录一下填坑历程 作为天朝第一的支付工具，也是我们开发必须的。支付宝的支付分两种，一种pc,一种移动。 PC PC端的支付还是相对简单的，整个支付过程分几步，下载阿里的支付代码包。 首先配置一下账号密码，在alipay.config.php里填写对应内容 12345678//合作身份者id，以2088开头的16位纯数字$alipay_config['partner'] = '';//收款支付宝账号$alipay_config['seller_email'] = '';//安全检验码，以数字和字母组成的32位字符$alipay_config['key'] = ''; 配置订单相关信息，以及异步响应相关信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970require_once("alipay.config.php");require_once("lib/alipay_submit.class.php");/**************************请求参数**************************/ //支付类型 $payment_type = "1"; //必填，不能修改 //服务器异步通知页面路径 $notify_url = "http://www.jxshop.com/index.php/Home/Order/receive"; //需http://格式的完整路径，不能加?id=123这类自定义参数 //页面跳转同步通知页面路径 $return_url = "";//填写异步响应请求地址 //需http://格式的完整路径，不能加?id=123这类自定义参数，不能写成http://localhost/ //商户订单号 $out_trade_no = $orderId; //商户网站订单系统中唯一订单号，必填 //订单名称 $subject = '我的定单'; //必填 $model = D('Order'); $tp = $model-&gt;field('total_price')-&gt;find($orderId); //付款金额 $total_fee = $tp['total_price']; //必填 //订单描述 $body = '我的描述'; //商品展示地址 $show_url = 'http://www.jxshop.com/index.php/Home/Order/view/id/'.$orderId; //需以http://开头的完整路径，例如：http://www.商户网址.com/myorder.html //防钓鱼时间戳 $anti_phishing_key = ""; //若要使用请调用类文件submit中的query_timestamp函数 //客户端的IP地址 $exter_invoke_ip = ""; //非局域网的外网IP地址，如：221.0.0.1/************************************************************///构造要请求的参数数组，无需改动$parameter = array( "service" =&gt; "create_direct_pay_by_user", "partner" =&gt; trim($alipay_config['partner']), "seller_email" =&gt; trim($alipay_config['seller_email']), "payment_type" =&gt; $payment_type, "notify_url" =&gt; $notify_url, "return_url" =&gt; $return_url, "out_trade_no" =&gt; $out_trade_no, "subject" =&gt; $subject, "total_fee" =&gt; $total_fee, "body" =&gt; $body, "show_url" =&gt; $show_url, "anti_phishing_key" =&gt; $anti_phishing_key, "exter_invoke_ip" =&gt; $exter_invoke_ip, "_input_charset" =&gt; trim(strtolower($alipay_config['input_charset'])));//建立请求$alipaySubmit = new AlipaySubmit($alipay_config);return $alipaySubmit-&gt;buildRequestForm($parameter,"get", '去支付宝支付'); 可以在下订单之后添加对应的支付button，然后可以根据上一项填写的异步请求地址在控制器中添加对应的方法来处理支付宝服务器发送过来的状态，然后根据发送过来的状态来改变我们数据库中订单的状态，支付函数这里就不po了。 移动端 移动端跟pc端大同小异，只不过移动端需要开发人员整合的；php后端只接收支付结果通知即可。 这不是关键，后来发现俊哥已经写好了非常好的类包，瞬间感觉自己太年轻了下面是俊哥的解决方案。示例项目：https://github.com/baijunyao/thinkphp-bjyadmin 导入sdk，/ThinkPHP/Library/Vendor/Alipay，需要说明的是；这个sdk原本是担保支付的；后来被改成即时到账的；所以；如果如果按我这篇文章整合；就需要下载示例项目；然后拷贝Alipay了； 配置项/Application/Common/Conf/config.php 1234567891011121314'ALIPAY_CONFIG' =&gt; array( 'partner' =&gt; '', // partner 从支付宝商户版个人中心获取 'seller_email' =&gt; '', // email 从支付宝商户版个人中心获取 'key' =&gt; '', // key 从支付宝商户版个人中心获取 'sign_type' =&gt; strtoupper(trim('MD5')), // 可选md5 和 RSA 'input_charset' =&gt; 'utf-8', // 编码 (固定值不用改) 'transport' =&gt; 'http', // 协议 (固定值不用改) 'cacert' =&gt; VENDOR_PATH.'Alipay/cacert.pem', // cacert.pem存放的位置 (固定值不用改) 'notify_url' =&gt; 'http://baijunyao.com/Api/Alipay/alipay_notify', // 异步接收支付状态通知的链接 'return_url' =&gt; 'http://baijunyao.com/Api/Alipay/alipay_return', // 页面跳转 同步通知 页面路径 支付宝处理完请求后,当前页面自 动跳转到商户网站里指定页面的 http 路径。 (扫码支付专用) 'show_url' =&gt; 'http://baijunyao.com/User/Order/index', // 商品展示网址,收银台页面上,商品展示的超链接。 (扫码支付专用) 'private_key_path' =&gt; '', //移动端生成的私有key文件存放于服务器的 绝对路径 如果为MD5加密方式；此项可为空 (移动支付专用) 'public_key_path' =&gt; '', //移动端生成的公共key文件存放于服务器的 绝对路径 如果为MD5加密方式；此项可为空 (移动支付专用) ), 支付函数 1234567891011121314151617181920212223242526272829303132333435/** * 跳向支付宝付款 * @param array $order 订单数据 必须包含 out_trade_no(订单号)、price(订单金额)、subject(商品名称标题) */function alipay($order)&#123; vendor('Alipay.AlipaySubmit','','.class.php'); // 获取配置 $config=C('ALIPAY_CONFIG'); $data=array( "_input_charset" =&gt; $config['input_charset'], // 编码格式 "logistics_fee" =&gt; "0.00", // 物流费用 "logistics_payment" =&gt; "SELLER_PAY", // 物流支付方式SELLER_PAY（卖家承担运费）、BUYER_PAY（买家承担运费） "logistics_type" =&gt; "EXPRESS", // 物流类型EXPRESS（快递）、POST（平邮）、EMS（EMS） "notify_url" =&gt; $config['notify_url'], // 异步接收支付状态通知的链接 "out_trade_no" =&gt; $order['out_trade_no'], // 订单号 "partner" =&gt; $config['partner'], // partner 从支付宝商户版个人中心获取 "payment_type" =&gt; "1", // 支付类型对应请求时的 payment_type 参数,原样返回。固定设置为1即可 "price" =&gt; $order['price'], // 订单价格单位为元 // "price" =&gt; 0.01, // // 调价用于测试 "quantity" =&gt; "1", // price、quantity 能代替 total_fee。 即存在 total_fee,就不能存在 price 和 quantity;存在 price、quantity, 就不能存在 total_fee。 （没绕明白；好吧；那无视这个参数即可） "receive_address" =&gt; '1', // 收货人地址 即时到账方式无视此参数即可 "receive_mobile" =&gt; '1', // 收货人手机号码 即时到账方式无视即可 "receive_name" =&gt; '1', // 收货人姓名 即时到账方式无视即可 "receive_zip" =&gt; '1', // 收货人邮编 即时到账方式无视即可 "return_url" =&gt; $config['return_url'], // 页面跳转 同步通知 页面路径 支付宝处理完请求后,当前页面自 动跳转到商户网站里指定页面的 http 路径。 "seller_email" =&gt; $config['seller_email'], // email 从支付宝商户版个人中心获取 "service" =&gt; "create_direct_pay_by_user", // 接口名称 固定设置为create_direct_pay_by_user "show_url" =&gt; $config['show_url'], // 商品展示网址,收银台页面上,商品展示的超链接。 "subject" =&gt; $order['subject'] // 商品名称商品的标题/交易标题/订单标 题/订单关键字等 ); $alipay=new \AlipaySubmit($config); $new=$alipay-&gt;buildRequestPara($data); $go_pay=$alipay-&gt;buildRequestForm($new, 'get','支付'); echo $go_pay;&#125; 同样；看注释就行了；调用方法； 123456$data=array( 'out_trade_no'=&gt;time(), 'price'=&gt;1, 'subject'=&gt;'测试' );alipay($data); 到这已经跳到支付宝付款页面了； 同步接收通知/Application/Api/Controller/AlipayController.class.php 1234567891011121314151617* return_url接收页面 */ public function alipay_return()&#123; // 引入支付宝 vendor('Alipay.AlipayNotify','','.class.php'); $config=$config=C('ALIPAY_CONFIG'); $notify=new \AlipayNotify($config); // 验证支付数据 $status=$notify-&gt;verifyReturn(); if($status)&#123; // 下面写验证通过的逻辑 比如说更改订单状态等等 $_GET['out_trade_no'] 为订单号； $this-&gt;success('支付成功',U('User/Order/index')); &#125;else&#123; $this-&gt;success('支付失败',U('User/Order/index')); &#125; &#125; 异步接收通知/Application/Api/Controller/AlipayController.class.php 12345678910111213141516171819/** * notify_url接收页面 */ public function alipay_notify()&#123; // 引入支付宝 vendor('Alipay.AlipayNotify','','.class.php'); $config=$config=C('ALIPAY_CONFIG'); $alipayNotify = new \AlipayNotify($config); // 验证支付数据 $verify_result = $alipayNotify-&gt;verifyNotify(); if($verify_result) &#123; echo "success"; // 下面写验证通过的逻辑 比如说更改订单状态等等 $_POST['out_trade_no'] 为订单号； &#125;else &#123; echo "fail"; &#125; &#125; 正常流程中；第四步就已经结束了；但是呢；很多时候因为各种原因；比如说用户支付成功后还没等支付宝跳转就关掉了窗口；等等原因；在支付成功后并没有成功跳转回return_url指定的url这时候就是notify_url这个发挥作用的时候了；支付宝会按照一定的频率往我们的服务器发送异步post的支付结果通知；我们把处理支付成功后的业务逻辑在这也放一份就可以了； 关于不知道怎么查看异步发过来的数据的补充 好多童鞋在问支付后；不知道怎么查看接收到的支付状态通知；这里做个补充；首先；我们的服务器必须是外网可以正常访问到的；必须注意不能有 登录或者权限之类的拦截；另外补充一个简单的查看收到的内容的方法用于测试；/Application/Api/Controller/AlipayController.class.php 123456789101112131415161718192021/** * notify_url接收页面 */ public function alipay_notify()&#123; // 下面的file_put_contents是用来简单查看异步发过来的数据 测试完可以删除； file_put_contents('./notify.text', json_encode($_POST)); // 引入支付宝 vendor('Alipay.AlipayNotify','','.class.php'); $config=$config=C('ALIPAY_CONFIG'); $alipayNotify = new \AlipayNotify($config); // 验证支付数据 $verify_result = $alipayNotify-&gt;verifyNotify(); if($verify_result) &#123; echo "success"; // 下面写验证通过的逻辑 比如说更改订单状态等等 $_POST['out_trade_no'] 为订单号； &#125;else &#123; echo "fail"; &#125; &#125; 关于可能出现ILLEGAL_SIGN错误的解放方案 示例项目中的 function.php 中顶部是有设置编码的：12header("Content-type:text/html;charset=utf-8");]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[fastcgi与php-fpm浅谈]]></title>
      <url>%2F%2Fblog%2F2016%2F09%2Fphp-fpm.html</url>
      <content type="text"><![CDATA[fastcgi与php-fpm的关系一直挺迷惑的，今天在segmentfault上看到了不错的解释。 刚开始对这个问题我也挺纠结的，看了《HTTP权威指南》后，感觉清晰了不少。 首先，CGI是干嘛的？CGI是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。 web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。 当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。 好了，CGI是个协议，跟进程什么的没关系。那fastcgi又是什么呢？Fastcgi是用来提高CGI程序性能的。 提高性能，那么CGI程序的性能问题在哪呢？”PHP解析器会解析php.ini文件，初始化执行环境”，就是这里了。标准的CGI对每个请求都会执行这些步骤（不闲累啊！启动进程很累的说！），所以处理每个时间的时间会比较长。这明显不合理嘛！那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。 那PHP-FPM又是什么呢？是一个实现了Fastcgi的程序，被PHP官方收了。 大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。 好了，最后来回来你的问题。 网上有的说，fastcgi是一个协议，php-fpm实现了这个协议 对。 有的说，php-fpm是fastcgi进程的管理器，用来管理fastcgi进程的 对。php-fpm的管理对象是php-cgi。但不能说php-fpm是fastcgi进程的管理器，因为前面说了fastcgi是个协议，似乎没有这么个进程存在，就算存在php-fpm也管理不了他（至少目前是）。 有的说，php-fpm是php内核的一个补丁 以前是对的。因为最开始的时候php-fpm没有包含在PHP内核里面，要使用这个功能，需要找到与源码版本相同的php-fpm对内核打补丁，然后再编译。后来PHP内核集成了PHP-FPM之后就方便多了，使用--enalbe-fpm这个编译参数即可。 有的说，修改了php.ini配置文件后，没办法平滑重启，所以就诞生了php-fpm 是的，修改php.ini之后，php-cgi进程的确是没办法平滑重启的。php-fpm对此的处理机制是新的worker用新的配置，已经存在的worker处理完手上的活就可以歇着了，通过这种机制来平滑过度。 还有的说PHP-CGI是PHP自带的FastCGI管理器，那这样的话干吗又弄个php-fpm出 不对。php-cgi只是解释PHP脚本的程序而已。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何配置nginx同时运行不同版本的php-fpm]]></title>
      <url>%2F%2Fblog%2F2016%2F07%2Fnginx-fpm.html</url>
      <content type="text"><![CDATA[在/usr/local/php/etc/php-fpm.conf里找到 listen = 127.0.0.1:9000 将端口9000修改为9001 在相应的nginx配置里也做同样的端口修改]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[奇葩说5.14后感]]></title>
      <url>%2F%2Fblog%2F2016%2F05%2Fqipashuo.html</url>
      <content type="text"><![CDATA[辩题：痛苦的绝症病人想要放弃自己的生命，我该不该鼓励他撑下去？ “我今天才真正的走了，很高兴和你做一世父子，有缘再聚。” 本来我一个很克制的人，听到马东这句话瞬间泪如泉涌。这期节目我是跟我妈一块看的，这期节目播出的时候距离我姥姥去世正好10年了。 妈妈是家中小女，上面有三个姐姐两个哥哥。在城市里面老小可能是备受恩宠的一个，可是在农村，这种家庭时刻都要面临生活的压力，然而就是这样姥姥还是让我妈坚持读到了高中，没错，我妈是他们兄妹几个里面学历最高的那个。印象里姥姥对我们家有操不完的心，彬彬已经上初中了，怎么还是这么矮，以后不会不长了吧；这个季度的包菜价格（包菜是我们那里春季的主要经济来源）这么低，估计爱玲她们家又难了。姥姥去世那年我正初三，为了不耽误我准备中考，我妈直到我姥姥要下葬那天才告诉我，姥姥因为癌症，化疗了半年，这半年一直靠输水维持生命，后来死是被饿死的，因为没法进食，血管也已经凝固连葡萄糖都输不进去。姥姥临死之前对我奶奶说:”我走了，以后这都是你的事情了”，当我妈跟我转述这句话的时候，我感觉整个人被什么击中了一样。 就像高晓松说的那样 你是那颗星星我是你旁边的这颗星我的整个轨迹是被你影响即使有一天这颗星星熄灭了它变成了暗物质它变成了看不见的东西他依然在影响着我的轨迹你的出现永远改变着我的星轨无论你在哪里 姥姥我想你了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[thinkphp整合系列之短信验证码、订单通知]]></title>
      <url>%2F%2Fblog%2F2016%2F03%2Fmessage.html</url>
      <content type="text"><![CDATA[正好需要用短信功能，看到白神的博客非常详细的写了，mark一下 现在这个短信通知泛滥的年代；应用如果没有个短信注册；你都不敢说你是搞开发的；这个验证码搞起来是不难的；但是如果刚接触也是有点不知从哪下手的迷茫；先讲下概念；要想发送验证码；需要至少三项；appid、key、模板id；appid、和key比如较容易理解；各种第三方平台都会提供的；可能叫法不一样；模板id就是指的短信的内容；例如【淘宝】验证码是192612，请您在5分钟内输入；这就是一个模板；我们发短信的时候只能改变192612、和5这两个数字；其他是固定的；因为政策的问题；模板需要申请并审核；一般1个工作日就过了；下面来具体写流程； 找一个靠谱的短信验证码平台；推荐如下使用过的；下面以容联云通讯为例；其他平台一个道理； 容联云通讯：http://www.yuntongxun.com/ 注册；登录；认证；都是废话；拿到ACCOUNT SID、AUTH 创建一个应用； 新增一个模板； 等审核通过；拿到模板ID；好；到此；完成； 完成？想多了吧；这是刚达到了可以发送验证码的基本条件；接着下载官方的SDK； 标题挂着Thinkphp集成短信验证码的；再不写thinkphp；想必是要被喷成渣！渣都不剩！ 所有的源代码都可以在我的开源项目bjyadmin中找到：https://github.com/baijunyao/thinkphp-bjyadmin 以我的开源项目为例；放在/ThinkPHP/Library/Org/Xb/Rest.class.php 在公共函数库中增加函数/Application/Common/Common/function.php 12345678910111213141516171819202122232425262728293031323334/** * 发送 容联云通讯 验证码 * @param int $phone 手机号 * @param int $code 验证码 * @return boole 是否发送成功 */function send_sms_code($phone,$code)&#123; //请求地址，格式如下，不需要写https:// $serverIP='app.cloopen.com'; //请求端口 $serverPort='8883'; //REST版本号 $softVersion='2013-12-26'; //主帐号 $accountSid=C('RONGLIAN_ACCOUNT_SID'); //主帐号Token $accountToken=C('RONGLIAN_ACCOUNT_TOKEN'); //应用Id $appId=C('RONGLIAN_APPID'); $rest = new \Org\Xb\Rest($serverIP,$serverPort,$softVersion); $rest-&gt;setAccount($accountSid,$accountToken); $rest-&gt;setAppId($appId); // 发送模板短信 $result=$rest-&gt;sendTemplateSMS($phone,array($code,5),59939); if($result==NULL) &#123; return false; &#125; if($result-&gt;statusCode!=0) &#123; return false; &#125;else&#123; return true; &#125;&#125; 把ACCOUNT SID、AUTH TOKEN、模板id 填到配置项/Application/Common/Conf/config.php 中 1234'RONGLIAN_ACCOUNT_SID' =&gt; '', //容联云通讯 主账号 accountSid'RONGLIAN_ACCOUNT_TOKEN' =&gt; '', //容联云通讯 主账号token accountToken'RONGLIAN_APPID' =&gt; '', //容联云通讯 应用Id appid'RONGLIAN_TEMPLATE_ID' =&gt; '', //容联云通讯 模板Id 调用函数：send_sms_code(‘手机号’,’验证码’);即可 只需要在配置项填空，就可以发短信了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用phpExcel实现Excel数据的导入导出]]></title>
      <url>%2F%2Fblog%2F2015%2F11%2Fphp-excel.html</url>
      <content type="text"><![CDATA[本人的这段例程是使用在Thinkphp的开发框架上，要是使用在其他框架也是同样的方法，很多人可能不能正确的实现Excel的导入导出，问题基本上都是phpExcel的核心类引用路径出错，如果有问题大家务必要对路劲是否引用正确进行测试 （一）导入Excel 第一，在前台html页面进行上传文件：如： 1234&lt;form method="post" action="php文件" enctype="multipart/form-data"&gt; &lt;h3&gt;导入Excel表：&lt;/h3&gt;&lt;input type="file" name="file_stu" /&gt; &lt;input type="submit" value="导入" /&gt;&lt;/form&gt; 第二，在对应的php文件进行文件的处理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748if (! empty ( $_FILES ['file_stu'] ['name'] )) &#123; $tmp_file = $_FILES ['file_stu'] ['tmp_name']; $file_types = explode ( ".", $_FILES ['file_stu'] ['name'] ); $file_type = $file_types [count ( $file_types ) - 1]; /*判别是不是.xls文件，判别是不是excel文件*/ if (strtolower ( $file_type ) != "xls") &#123; $this-&gt;error ( '不是Excel文件，重新上传' ); &#125; /*设置上传路径*/ $savePath = SITE_PATH . '/public/upfile/Excel/'; /*以时间来命名上传的文件*/ $str = date ( 'Ymdhis' ); $file_name = $str . "." . $file_type; /*是否上传成功*/ if (! copy ( $tmp_file, $savePath . $file_name )) &#123; $this-&gt;error ( '上传失败' ); &#125; /* *对上传的Excel数据进行处理生成编程数据,这个函数会在下面第三步的ExcelToArray类中 注意：这里调用执行了第三步类里面的read函数，把Excel转化为数组并返回给$res,再进行数据库写入 */ $res = Service ( 'ExcelToArray' )-&gt;read ( $savePath . $file_name ); /* 重要代码 解决Thinkphp M、D方法不能调用的问题 如果在thinkphp中遇到M 、D方法失效时就加入下面一句代码 */ //spl_autoload_register ( array ('Think', 'autoload' ) ); /*对生成的数组进行数据库的写入*/ foreach ( $res as $k =&gt; $v ) &#123; if ($k != 0) &#123; $data ['uid'] = $v [0]; $data ['password'] = sha1 ( '111111' ); $data ['email'] = $v [1]; $data ['uname'] = $v [3]; $data ['institute'] = $v [4]; $result = M ( 'user' )-&gt;add ( $data ); if (! $result) &#123; $this-&gt;error ( '导入数据库失败' ); &#125; &#125; &#125;&#125; 第三：ExcelToArrary类,用来引用phpExcel并处理Excel数据的 1234567891011121314151617181920212223242526class ExcelToArrary extends Service&#123; public function __construct() &#123; /*导入phpExcel核心类 注意 ：你的路径跟我不一样就不能直接复制*/ include_once('./Excel/PHPExcel.php'); &#125;/*** 读取excel $filename 路径文件名 $encode 返回数据的编码 默认为utf8*以下基本都不要修改*/public function read($filename,$encode='utf-8')&#123; $objReader = PHPExcel_IOFactory::createReader('Excel5'); $objReader-&gt;setReadDataOnly(true); $objPHPExcel = $objReader-&gt;load($filename); $objWorksheet = $objPHPExcel-&gt;getActiveSheet(); $highestRow = $objWorksheet-&gt;getHighestRow(); $highestColumn = $objWorksheet-&gt;getHighestColumn(); $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn); $excelData = array(); for ($row = 1; $row &lt;= $highestRow; $row++) &#123; for ($col = 0; $col &lt; $highestColumnIndex; $col++) &#123; $excelData[$row][] =(string)$objWorksheet-&gt;getCellByColumnAndRow($col, $row)-&gt;getValue(); &#125; &#125; return $excelData; &#125; &#125; 第四，以上就是导入的全部内容 （二）Excel的导出（相对于导入简单多了） 第一，先查出数据库里面要生成Excel的数据，如： $data= M(‘User’)-&gt;findAll(); //查出数据$name=’Excelfile’; //生成的Excel文件文件名$res=service(‘ExcelToArrary’)-&gt;push($data,$name); 第二，ExcelToArrary类,用来引用phpExcel并处理数据的 123456789101112131415161718192021222324252627282930313233343536class ExcelToArrary extends Service&#123; public function __construct() &#123; /*导入phpExcel核心类 注意 ：你的路径跟我不一样就不能直接复制*/ include_once('./Excel/PHPExcel.php'); &#125; /* 导出excel函数*/ public function push($data,$name='Excel')&#123; error_reporting(E_ALL); date_default_timezone_set('Europe/London'); $objPHPExcel = new PHPExcel(); /*以下是一些设置 ，什么作者 标题啊之类的*/ $objPHPExcel-&gt;getProperties()-&gt;setCreator("转弯的阳光") -&gt;setLastModifiedBy("转弯的阳光") -&gt;setTitle("数据EXCEL导出") -&gt;setSubject("数据EXCEL导出") -&gt;setDescription("备份数据") -&gt;setKeywords("excel") -&gt;setCategory("result file"); /*以下就是对处理Excel里的数据， 横着取数据，主要是这一步，其他基本都不要改*/ foreach($data as $k =&gt; $v)&#123; $num=$k+1; $objPHPExcel-&gt;setActiveSheetIndex(0) //Excel的第A列，uid是你查出数组的键值，下面以此类推 -&gt;setCellValue('A'.$num, $v['uid']) -&gt;setCellValue('B'.$num, $v['email']) -&gt;setCellValue('C'.$num, $v['password']) &#125; $objPHPExcel-&gt;getActiveSheet()-&gt;setTitle('User'); $objPHPExcel-&gt;setActiveSheetIndex(0); header('Content-Type: application/vnd.ms-excel'); header('Content-Disposition: attachment;filename="'.$name.'.xls"'); header('Cache-Control: max-age=0'); $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5'); $objWriter-&gt;save('php://output'); exit; &#125; 第三，以上就是导出的全部内容]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[接口响应时间测试]]></title>
      <url>%2F%2Fblog%2F2015%2F10%2Finterface.html</url>
      <content type="text"><![CDATA[写了两周的接口，快写吐了。。。发现tp中有个G函数可以用来测试接口响应时间，手册果然是个宝藏 接口脚本响应时间，很大程度上反映了，接口返回数据给用户的时间。可以使用TP框架里的G方法进行时间和内存占用的检测。 代码实现]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo+Github搭建个人博客心得]]></title>
      <url>%2F%2Fblog%2F2015%2F08%2Fhexo.html</url>
      <content type="text"><![CDATA[花了一天时间搭好hexo博客，记录一下搭建流程 安装Hexo 安装 1234mkdir hexo #创建一个文件夹cd hexonpm install -g hexo-clinpm install hexo --save 部署Hexo：在Git shell 中输入 1hexo init 安装Hexo 插件：自动生成sitemap,Rss，部署到git等，建议安装 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save Hexo常用的几个命令创建新博文执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。 1hexo new [layout] "postName" #新建文章 其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md 1234title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;tags:--- 请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。 我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下： 12345title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;categories: tags: --- 更多信息参考: Writing 运行服务器1$ hexo server 参考: Server 生成静态站点文件1$ hexo generate 参考: Generating 部署到Git部署到Github前需要配置_config.yml文件 添加如下内容： 1234deploy: type: git repository: git@github.com:wangche/wangche.github.io.git branch: master 然后输入： 1$ hexo deploy 参考: Deployment fancybox可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片: 12345title: Hexo建立个人博客photos:- - --- 主题设置本博客采用了iissnan的Next主题，他的博客有详细的安装教程，这里贴下链接next，有需要的朋友直接参考他写的教程，一气呵成~ 下载主题12$ cd hexo目录$ git clone https://github.com/iissnan/hexo-theme-next themes/next 应用Hexo主题在hexo目录下找到_config.yml配置文件，找到 theme 字段，并将其值更改为 next，如下所示： 1theme: next 设置RSS在上面的步骤中已经安装了Rss插件，只要要在themes\next_config.yml配置文件中添加如下一行即可： 1rss： 添加标签tags页面定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page： 12$ cd hexo目录$ hexo new page tags 内容如下所示，如果要关闭tags页面的评论可以设置comments为false： 12345title: 标签date: 2014-12-22 12:39:04type: "tags"comments: false--- 这样以后tags页面在每次执行hexo generate后自动更新。 添加分类页面和上面的一样，在hexo目录下执行下面命令： 1$ hexo new page categories 内容为： 12345title: 分类date: 2014-12-22 12:39:04type: "categories"comments: false--- 添加404页面新建一个404.html文件，放到themes\next\source目录下，内容你自己定。 代码高亮Hexo下很简单，只需要按照下面的格式：效果如下： 1System.out.println("hello hexo!"); 你也可以更改代码高亮的主题，一共有五种，可选的值有 normal，night， night blue， night bright， night eighties，修改themes\next_config.yml文件，如下所示： 1highlight_theme: normal 第三方服务多说评论登录多说官网，登录后点我要安装，然后填写站点相关信息，最主要的是duoshuo_shortname这个字段，设置后之后修改themes\next_config.yml文件，把duoshuo_shortname改成你的，如下所示： 1duoshuo_shortname: ezlippi 百度统计登录百度统计，转到获取代码截面，找到百度统计脚本id，然后把themes\next_config.yml文件下的baidu_analytics字段改成你的id，如下所示： 1baidu_analytics: 340874ba9357cbe81570aa4ac1185941 站内搜索next主题集成了swiftype搜索，你需要到swiftype配置一个搜索引擎， 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考：swfitype教程 其他设置其他设置比如侧边栏、友情链接、菜单栏等请参考next主题配置教程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F%2Fblog%2F2015%2F08%2Fhello-world.html</url>
      <content type="text"><![CDATA[博客从简书搬过来啦，欢迎您的到来。]]></content>
    </entry>

    
  
  
</search>
